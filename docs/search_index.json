[
["index.html", "Building a spatial data library and R toolkit Chapter 1 About this", " Building a spatial data library and R toolkit Michael Sumner 2019-08-22 Chapter 1 About this This workshop is for R users familiar with spatial workflows looking to provide shared toolkit for their research group. R is now used at all levels of scientific project work including obtaining raw data, indexing and processing public data streams and writing analyses and reports. This workshop describes the components involved in a domain-specific R toolkit that provides access to a wide variety of remote sensing, model output, and time-series environmental data. This session will explore a domain specific toolkit written for Southern Ocean ecosystems research. We will obtain a set of remote sensing time series data (sea ice concentration), a global topography data set, and use these to match up values in space and time with a tracking data set from elephant seals in the southern ocean. The key components of the toolkit solve the following problems: where do these external environmental data come from? where do we store our local copies and how is the data kept up to date for local use? how is the data read and understood? how to integrate environmental data with our research data? SETUP https://mdsumner.github.io/domain-toolkit-oghub/getting-set-up.html#getting-set-up DATA SETS USED NSIDC SMMR-SSM/I Nasateam sea ice concentration, daily for 2013 in the southern hemisphere https://nsidc.org/data/nsidc-0051 ETOPO2 global topography https://www.ngdc.noaa.gov/mgg/global/etopo2.html mirounga_leonina Example elephant seal Argos tracking data, https://github.com/ianjonsen/bsam "],
["getting-set-up.html", "Chapter 2 Getting Set Up 2.1 Undecided section", " Chapter 2 Getting Set Up We need the latest versions of these R packages installed from GitHub. It’s best to run each line in turn in case there are issues or the user needs to provide input. ## make sure we have the packages we need if (!requireNamespace(&quot;remotes&quot;, quietly = TRUE)) { install.packages(&quot;remotes&quot;) } req1 &lt;- c(&quot;dplyr&quot;, &quot;ggplot2&quot;) remotes::install_cran(req1) ## and some github packages req2 &lt;- c(&quot;ropensci/antanym&quot;, &quot;AustralianAntarcticDivision/blueant&quot;, &quot;AustralianAntarcticDivision/raadtools&quot;, &quot;AustralianAntarcticDivision/SOmap&quot;) remotes::install_github(req2) We can get everything we need for the workshop by running the following code. td &lt;- &quot;.&quot; ## Mike, change to tempdir() td &lt;- normalizePath(&quot;~&quot;) library(dplyr) my_data_dir &lt;- file.path(td, &quot;data-library&quot;) dir.create(my_data_dir, showWarnings = FALSE) library(blueant) src &lt;- bind_rows( sources(&quot;NSIDC SMMR-SSM/I Nasateam sea ice concentration&quot;, hemisphere = &quot;south&quot;, time_resolutions = &quot;day&quot;, years = 2013), sources(&quot;ETOPO2 bathymetry&quot;)) result &lt;- bb_get(src, local_file_root = my_data_dir, clobber = 0, verbose = TRUE, confirm = NULL) raadfiles::set_raad_data_roots(my_data_dir, replace_existing = TRUE) raadtools::set_data_roots(my_data_dir) 2.1 Undecided section This workshop may include a pre-bundled data set using the piggyback GitHub releases mechanism. The bowerbird package will happily build this project from scratch from the original data providers, but it takes longer than we have for this workshop. "],
["overview.html", "Chapter 3 Overview 3.1 Get Files 3.2 Index Files 3.3 Read Files", " Chapter 3 Overview What is required for a domain-specific toolkit? where is the data? where are the files? are the files up to date? how do I read the data? how do I map the data? how do I integrate the data with my data? This session will first present a way of working with a data library that we have developed. I’ll show some examples of reading remote sensing data, comparing it with a global topographic data set. In the next section we will all create that toolkit and use it with these two data sets. Our data library includes dozens of other types of data sources, but it’s too much to replicate in a short session. We tend to see these three tasks done by a researcher all mixed together. Get Files. Index Files. Read Files. 3.1 Get Files Download files for a collection. Specify file type, pattern. We need a download method, check local copy for updates at source, unzip after download. Download method may be http, ftp, require login, or special queries. 3.2 Index Files Listing files is best done regularly, it takes time so should be cached. List all files in the library, keep a copy of the list, search the list for targets. File names can change, directory structure can change, so search needs to be general or easily updateable. 3.3 Read Files So many formats! GDAL, rgdal, sf, raster, stars, NetCDF, GeoTIFF, raw binary, text files "],
["a-preview-with-raadtools.html", "Chapter 4 A preview with raadtools", " Chapter 4 A preview with raadtools This code relies on having run the set up in setup link 00_getting_set_up. library(raadtools) my_data_dir &lt;- file.path(tempdir(), &quot;datalibrary&quot;) set_data_roots(my_data_dir) Our data toolkit is a growing collection of known datasets. Most can be read by raster or stars, but many have specific details that aren’t easily understood by generic tools. readice(latest = TRUE) ## a map projection ## class : RasterStack ## dimensions : 332, 316, 104912, 1 (nrow, ncol, ncell, nlayers) ## resolution : 25000, 25000 (x, y) ## extent : -3950000, 3950000, -3950000, 4350000 (xmin, xmax, ymin, ymax) ## crs : +proj=stere +lat_0=-90 +lat_ts=-70 +lon_0=0 +k=1 +x_0=0 +y_0=0 +a=6378273 +b=6356889.449 +units=m +no_defs ## names : nt_20190820_f18_nrt_s.bin ## min values : 0 ## max values : 100 ## time : 2019-08-20 readsst(&quot;2002-01-01&quot;) ## longlat regular ## class : RasterLayer ## dimensions : 720, 1440, 1036800 (nrow, ncol, ncell) ## resolution : 0.25, 0.25 (x, y) ## extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) ## crs : +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0 ## source : memory ## names : Daily.sea.surface.temperature ## values : -1.8, 32.75 (min, max) ## time : 2002-01-01 readcurr(&quot;2003-01-02&quot;, xylim = extent(100, 120, -40, -30)) ## two variables ## class : RasterStack ## dimensions : 40, 80, 3200, 2 (nrow, ncol, ncell, nlayers) ## resolution : 0.25, 0.25 (x, y) ## extent : 100, 120, -40, -30 (xmin, xmax, ymin, ymax) ## crs : +proj=longlat +a=6371000 +b=6371000 +no_defs ## names : Absolute.geostrophic.velocity..zonal.component, Absolute.geostrophic.velocity..meridian.component ## min values : -0.5047, -0.5292 ## max values : 0.5347, 0.5603 ## time : 2003-01-02, 2003-01-02 "],
["where-is-the-data.html", "Chapter 5 Where is the data?", " Chapter 5 Where is the data? Nice if we have a single location for a shared data library, configurable and available to different systems (Linux, Windows, Mac, servers, desktop). "],
["where-are-the-files-and-are-they-up-to-date.html", "Chapter 6 Where are the files and are they up to date?", " Chapter 6 Where are the files and are they up to date? An index of available file names is useful before we even access any data. time coverage type of data This file listing provides an immediate check of suitability, maybe I need last week’s data but only up to a month ago is available. Or perhaps only started in 2002 (and I need 1990). "],
["how-to-read-the-data.html", "Chapter 7 How to read the data?", " Chapter 7 How to read the data? We have standard read tools in raster, stars, rgdal, ncdf4, RNetCDF, rhdf5 … but do they know about particular details and vagaries? Is time included, is georeferencing correct, are these static variables or paired vector components, a continuous or discrete quantity? Plotting, mapping, projections, extractions, aggregating, … https://ropensci.org/blog/2018/11/13/antarctic/ take content from https://github.com/AustralianAntarcticDivision/ropenblog/blob/master/antarctic.Rmd marriage of disparate data, projections, raster/vector, time hard problems start with real analysis, but keeping data up to date is a huge overhead key is index of available files, wrapper funs to read by time/space "]
]
